Maybe :: enum(*V)
    Just *V
    None
end

orDefault :: pu maybe, a ->
    case maybe do
        Just x -> x end
        None -> a end
    end
end

andThen :: pu maybe: Maybe(*V), f: (pu *V -> Maybe(*W)) -> Maybe(*W)
    case maybe do
        Just x -> f(x) end
        None -> Maybe.None end
    end
end

flatten :: pu maybe ->
    case maybe do
        Just x -> x end
        None -> Maybe.None end
    end
end

isJust :: pu maybe -> bool
    case maybe do
        Just _ -> true end
        None -> false end
    end
end

isNone :: pu maybe -> bool
    not isJust' maybe
end

map :: pu a: Maybe(*A), f: (pu *A -> *B) -> Maybe(*B)
    case a do
        Just x -> Maybe.Just (f' x) end
        None -> Maybe.None end
    end
end


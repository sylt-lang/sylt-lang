Set :: blob(*V) {
    __PHANTOM_VALUE: *V
}

// Sneaky reuse
xx_len : pu Set(*V) -> int : external
len :: xx_len

set_new : pu<V: CmpEqu> -> Set(*V) : external
set_add : fn<V: CmpEqu> Set(*V), *V -> void : external
set_remove : fn<V: CmpEqu> Set(*V), *V -> void : external

// We have to sacrefice purity for this to work in Sylt - so I wrote it in Lua.
set_from_list : pu<V: CmpEqu> [*V] -> Set(*V) : external

from_list :: set_from_list

new :: set_new
add :: set_add
remove :: set_remove

set_map : pu<VA: CmpEqu, VB: CmpEqu> Set(*VA), (pu *VA -> *VB) -> Set(*VB) : external
set_for_each : fn<V: CmpEqu> Set(*V), (fn *V -> void) -> void : external

map :: set_map
for_each :: set_for_each

set_contains : pu<V: CmpEqu> Set(*V), *V -> bool : external

contains :: set_contains

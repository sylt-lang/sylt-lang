// Constants
tau :: pi * 2.0
pi :: 3.1415926535897
e :: 2.718281828459045235360

abs : pu<N: Num> *N -> *N: pu n ->
    if n < 0 do
        -n
    else do
        n
    end
end

atan2: pu float, float -> float : external
sin: pu float -> float : external
cos: pu float -> float : external
floor: pu<N: Num> *N -> int : external
sqrt: pu float -> float : external
sign: pu<N: Num> *N -> *N : external

clamp :: pu x, lo, hi ->
    min(hi, max(x, lo))
end

min : pu<N: Num> *N, *N -> *N : pu a, b ->
    if a < b do
        a
    else do
        b
    end
end

max : pu<N: Num> *N, *N -> *N : pu a, b ->
    if a > b do a
    else do b
    end
end

rem: pu<N: Num> *N, *N -> *N : external
pow: pu float, float -> float : external
div: pu int, int -> int : external

angle :: pu v: (float, float) -> float
    atan2(v[0], v[1])
end

magnitude_squared :: pu v: (float, float) -> float
    dot(v, v)
end

magnitude :: pu v: (float, float) -> float
    sqrt(magnitude_squared(v))
end

normalize :: pu v: (float, float) -> (float, float)
    mag :: magnitude(v)
    (v[0] / mag, v[1] / mag)
end

reflect: pu (float, float), (float, float) -> (float, float) : external

dot :: pu v1: (float, float), v2: (float, float) -> float
    v1[0] * v2[0] + v1[1] * v2[1]
end

random : fn -> float : external

/// args: min, max
/// error if max < min
randint : fn int, int -> int : external

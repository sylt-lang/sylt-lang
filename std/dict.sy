from maybe use (Maybe, isJust)

Dict :: blob(*K, *V) {
    __PHANTOM_KEY: *K,
    __PHANTOM_VALUE: *V
}

dict_new : pu -> Dict(*K, *V) : external
dict_update : fn Dict(*K, *V), *K, *V -> void : external
dict_remove : fn Dict(*K, *V), *K -> void : external

// We have to sacrefice purity for this to work in Sylt - so I wrote it in Lua.
dict_from_list : pu [(*K, *V)] -> Dict(*K, *V) : external

from_list :: dict_from_list

new :: dict_new
update :: dict_update
remove :: dict_remove

dict_get : pu Dict(*K, *V), *K -> Maybe(*V) : external
get :: dict_get

dict_map : pu Dict(*KA, *VA), (pu (*KA, *VA) -> (*KB, *VB)) -> Dict(*KB, *VB) : external
dict_for_each : fn Dict(*KA, *VA), (fn (*KA, *VA) -> void) -> Dict(*KB, *VB) : external

map :: dict_map
for_each :: dict_for_each

contains_key :: pu dict: Dict(*K, *V), key: *K -> bool
    isJust' get' dict, key
end

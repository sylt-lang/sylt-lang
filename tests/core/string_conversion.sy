from container use add
from list use push, pop
from unsafe use unsafe_force

A :: blob {
    b: float,
    a: int,
}
//B :: blob {
//    _self: B,
//}
start :: fn do
    // Basic types
    as_str(-1) <=> "-1"
    as_str(2.0) <=> "2.0"
    as_str(2.0000000000018) <=> "2.0000000000018"
    as_str("3.0") <=> "3.0"
    as_str(true) <=> "true"
    // List
    as_str(false) <=> "false"
    a := []
    a -> push(a)
    // Tuple
    as_str(a) <=> "[[...]]"
    as_str(()) <=> "()"
    as_str((1,)) <=> "(1,)"
    // Set
    as_str((1, 2)) <=> "(1, 2)"
    as_str({}) <=> "{}"
    as_str({1}) <=> "{1}"
    s :: as_str({1, 2})
    (s == "{1, 2}" or s == "{2, 1}") <=> true
    c :: {}
    c -> add(c)
    // Dict
    as_str(c) <=> "{{...}}"
    as_str({:}) <=> "{:}"
    as_str({1: 2}) <=> "{1: 2}"
    d :: as_str({1: 2, 3: 4})
    // Blobs
    (d == "{1: 2, 3: 4}" or d == "{3: 4, 1: 2}") <=> true
    ab :: as_str(A {
        a: 100,
        b: 5.3,
    })
    print(ab)
    //b: B = unsafe_force(nil)
    //b = B {
    //    _self: b,
    //}
    //b._self = b
    //print(b)
    // Functions
    d :: fn x: int, y: int -> int do
        ret x + y
    end
    // Other
    print(d)
    print(pop)
    as_str(nil) <=> "nil"
end


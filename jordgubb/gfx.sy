use love as l
from love use love

Color :: blob {
    red: float,
    green: float,
    blue: float,
    alpha: float,
}

clearShader :: fn do
    x : fn -> void : common.unsafe_force' love.graphics.setShader
    x'
end

// NOTE(ed): Might be nice to convert HSL to RGB?
rgb :: fn r, g, b -> Color
    Color { red: r, green: g, blue: b, alpha: 1. }
end
rgba :: fn r, g, b, a -> Color
    Color { red: r, green: g, blue: b, alpha: a }
end
stableRandomColor :: fn i: float -> Color
    r :: rem' 0.3 + i * 3.33, 1.
    g :: rem' 0.2 + i * 7.77, 1.
    b :: rem' 0.7 + i * 5.55, 1.
    rgb' r, g, b
end

screenSize :: fn -> (int, int)
    (love.graphics.getWidth(), love.graphics.getHeight())
end

screenSizef :: fn -> (float, float)
    (as_float(love.graphics.getWidth()), as_float(love.graphics.getHeight()))
end

setColor :: fn color do
    love.graphics.setColor' (color.red, color.green, color.blue, color.alpha)
end

drawLine :: fn color, a, b do
    setColor' color
    love.graphics.line' a[0], a[1], b[0], b[1]
end

drawLinew :: fn color, w, a, b do
    setColor' color
    love.graphics.setLineWidth' w
    love.graphics.line' a[0], a[1], b[0], b[1]
    love.graphics.setLineWidth' 1.
end

drawCircle :: fn color, p, r do
    setColor' color
    love.graphics.circle' "fill", p[0], p[1], r
end

drawCircleOutline :: fn color, p, r do
    setColor' color
    love.graphics.circle' "line", p[0], p[1], r
end

drawRect :: fn color, p, dim do
    setColor' color
    love.graphics.rectangle' "fill", p[0], p[1], dim[0], dim[1]
end

drawRectCentered :: fn color, p, dim do
    drawRect' color, p - (dim[0] / 2., dim[1] / 2.), dim
end

drawRectOutline :: fn color, p, dim do
    setColor' color
    love.graphics.rectangle' "line", p[0], p[1], dim[0], dim[1]
end

drawRectCenteredOutline :: fn color, p, dim do
    drawRectOutline' color, p - (dim[0] / 2., dim[1] / 2.), dim
end

Alignment :: enum
    Center,
    Left,
    Right
end

alignmentToStr :: fn a ->
    case a do
        Center -> "center" end
        Left -> "left" end
        Right -> "right" end
    end
end

Font :: blob {
    // Not really happy with this...
    drawText: fn Color, str, (float, float) -> void,
    drawTextT: fn Color, str, (float, float), float, float -> void,
    drawTextF: fn Color, str, (float, float), Alignment, float -> void,
    drawTextFT: fn Color, str, (float, float), Alignment, float, float, float -> void,
}

drawText :: fn color, text, pos, r, s do
    setColor' color
    love.graphics.print' text, pos[0], pos[1], r, s, s
end

drawTextFT :: fn color, text, pos, alignment, maxWidth, r, s do
    setColor' color
    love.graphics.printf' text, pos[0], pos[1], maxWidth, alignmentToStr(alignment), r, s, s
end

// Returns a font that can be used
createFont :: fn f: l.Font -> Font
    Font {
        drawText: fn color, text, pos do
            love.graphics.setFont' f
            drawText' color, text, pos, 0., 1.
        end,
        drawTextT: fn color, text, pos, r, s do
            love.graphics.setFont' f
            drawText' color, text, pos, r, s
        end,
        drawTextF: fn color, text, pos: (float, float), alignemnt, maxWidth do
            love.graphics.setFont' f
            drawTextFT' color, text, pos, alignemnt, maxWidth, 0., 1.
        end,
        drawTextFT: fn color, text, pos, alignemnt, maxWidth, r, s do
            love.graphics.setFont' f
            drawTextFT' color, text, pos, alignemnt, maxWidth, r, s
        end,
    }
end

Image :: blob {
    img: *,
    getWidth: fn -> float,
    getHeight: fn -> float,
    draw: fn (float, float), float, (float, float) -> void,
    drawTinted: fn Color, (float, float), float, (float, float) -> void,
    drawCentered: fn (float, float), float, (float, float) -> void,
    drawTintedCentered: fn Color, (float, float), float, (float, float) -> void,
}

drawImage :: fn tint, img: l.ImageData, pos, rot, scale do
    setColor' tint
    x :: love.graphics.draw
    x' img, pos[0], pos[1], rot, scale[0], scale[1], 0., 0., 0.
end

drawImageCentered :: fn tint, img: l.ImageData, pos, rot, scale do
    w :: img.getWidth' img
    h :: img.getHeight' img
    setColor' tint

    // Work around for bug in typesystem, we don't copy
    // functions if they're fields.
    x :: love.graphics.draw
    x' img, pos[0], pos[1], rot, scale[0], scale[1], w / 2., h / 2., 0.
end

newImage :: fn filepath: str -> Image
    img : l.ImageData : love.graphics.newImage' filepath
    Image {
        img: img,
        getWidth: fn -> img.getWidth' img end,
        getHeight: fn -> img.getHeight' img end,
        draw: fn pos, rot, scale do
            drawImage' rgb(1., 1., 1.), img, pos, rot, scale
        end,
        drawTinted: fn tint, pos, rot, scale do
            drawImage' tint, img, pos, rot, scale
        end,
        drawCentered: fn pos, rot, scale do
            drawImageCentered' rgb(1., 1., 1.), img, pos, rot, scale
        end,
        drawTintedCentered: fn tint, pos, rot, scale do
            drawImageCentered' tint, img, pos, rot, scale
        end,
    }
end

SpriteSheet :: blob {
    img: Image,
    quads: [((int, int), (int, int))],
    lquads: [l.Quad],

    draw: fn Color, int, (float, float), float, (float, float) -> void,
    drawCenterd: fn Color, int, (float, float), float, (float, float) -> void,
}

// TODO(ed): Raise to std-lib - maybe solve the 0 situation.
for_range :: fn lo: *a, hi: *a, step: *a, f: fn *a -> void do
    // NOTE(ed): Wont work for zero... :(
    curr := lo
    loop curr < hi do
        f' curr
        curr += step
    end
end

// (w, h) - all in pixels
newImplicitSpriteSheet :: fn img: Image, spriteDim: (int, int) ->
    w :: spriteDim[0]
    h :: spriteDim[1]
    quads :: []
    // TODO(ed): Maybe remove the remained so we only get full tiles?
    // TODO(ed): Maybe add a divisibility test here?
    for_range' 0, as_int(img.getWidth()), w, fn x do
        for_range' 0, as_int(img.getHeight()), h, fn y do
            quads -> list.push' ((x, y), (w, h))
        end
    end
    newSpriteSheetFromQuads' img, quads
end

// ((x, y), (w, h)) - all in pixels
newSpriteSheetFromQuads :: fn img: Image, quads: [((int, int), (int, int))] ->
    lquads :: []
    quads -> for_each' fn quad do
        q :: love.graphics.newQuad' quad[0][0], quad[0][1], quad[1][0], quad[1][1], img.img
        list.push' lquads, q
    end
    SpriteSheet {
        img: img,
        quads: quads,
        lquads: lquads,

        draw: fn tint, sprite, pos, rot, scale do
            setColor' tint
            x: fn l.ImageData, l.Quad, float, float, float, float, float -> void: common.unsafe_force' love.graphics.draw
            lq :: lquads[sprite]
            x' img.img, lq, pos[0], pos[1], rot, scale[0], scale[1]
        end,
        drawCenterd: fn tint, sprite, pos, rot, scale do
            setColor' tint
            x: fn l.ImageData, l.Quad, float, float, float, float, float, int, int -> void: common.unsafe_force' love.graphics.draw
            lq :: lquads[sprite]
            q :: quads[sprite]
            x' img.img, lq, pos[0], pos[1], rot, scale[0], scale[1], as_int(q[1][0] / 2), as_int(q[1][1] / 2)
        end,
    }
end

Particles :: blob {
    particles: l.ParticleSystem,
    emit: fn int -> void,
    emitAt: fn (float, float), int -> void,
    setParticleLifetime: fn float, float -> void,
    setEmissionRate: fn int -> void,
    setLinearAcceleration: fn (float, float), (float, float) -> void,
    setLinearDamping: fn float, float -> void,
    // set EmitterPosition
    setPosition: fn (float, float) -> void,
    setDirection: fn float -> void,
    setSizes: fn float, float -> void,
    setSpeed: fn float, float -> void,
    setSpread: fn float -> void,

    setColors: fn Color, Color -> void,

    // NOTE(ed): There are a lot more settings to be added here,
    // so feel free to add them if you need them:
    // https://love2d.org/wiki/ParticleSystem

    update: fn float -> void,
    draw: fn Color -> void,
    drawAt: fn Color, (float, float) -> void,
}

updateParticles :: fn particles: Particles, delta do
    particles.update(delta)
end

newParticles :: fn image: Image ->
    particles :: love.graphics.newParticleSystem' image.img, 1000
    Particles {
        particles: particles,
        emit: fn amount: int do
            particles.emit' particles, amount
        end,
        emitAt: fn pos, amount: int do
            particles.setPosition' particles, pos[0], pos[1]
            particles.emit' particles, amount
        end,
        setParticleLifetime: fn lo, hi do
            particles.setParticleLifetime' particles, lo, hi
        end,
        setEmissionRate: fn rate do
            particles.setEmissionRate' particles, rate
        end,
        setLinearAcceleration: fn lo, hi do
            particles.setLinearAcceleration' particles, lo[0], lo[1], hi[0], hi[1]
        end,
        setLinearDamping: fn lo, hi do
            particles.setLinearDamping' particles, lo, hi
        end,
        setPosition: fn pos do
            particles.setPosition' particles, pos[0], pos[1]
        end,
        setDirection: fn dir do
            particles.setDirection' particles, dir
        end,
        setSizes: fn lo, hi do
            particles.setSizes' particles, lo, hi
        end,
        setSpeed: fn lo, hi do
            particles.setSpeed' particles, lo, hi
        end,
        setSpread: fn rad do
            particles.setSpread' particles, rad
        end,
        setColors: fn col1, col2 do
            particles.setColors' particles, col1.red, col1.green, col1.blue, col1.alpha, col2.red, col2.green, col2.blue, col2.alpha
        end,
        update: fn delta do
            particles.update' particles, delta
        end,
        draw: fn tint do
            setColor' tint
            x: fn * -> void: common.unsafe_force' love.graphics.draw
            x' particles
        end,
        drawAt: fn tint, pos do
            setColor' tint
            x: fn *, float, float -> void: common.unsafe_force' love.graphics.draw
            x' particles, pos[0], pos[1]
        end,
    }
end

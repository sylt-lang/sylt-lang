use love as l
from love use love

Sound :: blob {
    source: l.Source,

    play: fn -> void,
    playp: fn (float, float), (float, float) -> void,
    pause: fn -> void,
    stop: fn -> void,
    setLooping: fn bool -> void,
}

SoundType :: enum
    Static,
    Stream,
end

soundTypeToStr :: fn ty: SoundType -> str
    case ty do
        Static -> "static" end
        Stream -> "stream" end
    end
end

random_float :: fn lo, hi ->
    x : fn -> * : common.unsafe_force(love.math.random)
    x() * (hi - lo) + lo
end

soundFromSource :: fn source ->
    Sound {
        source: source,
        play: fn do
            love.audio.stop' source
            love.audio.play' source
        end,
        playp: fn vol, pitch do
            // TODO(ed): This is wrong... :((((
            source.setVolume' source, vol[0] + random_float(-0.5, 0.5) * vol[1]
            source.setPitch' source, pitch[0] + random_float(-0.5, 0.5) * pitch[1]
            play : fn -> * : common.unsafe_force(self.play)
            play'
        end,
        pause: fn do
            love.audio.pause' source
        end,
        stop: fn do
            love.audio.stop' source
        end,
        setLooping: fn looping do
            source.setLooping(source, looping)
        end
    }
end

newSound :: fn filepath, shouldLoop, kind ->
    source :: love.audio.newSource' filepath, soundTypeToStr(kind)
    source.setLooping' source, shouldLoop
    soundFromSource' source
end

// Should each playing of a sound clone it?
cloneSound :: fn sound -> Sound do
    x: fn * -> * : sound.source.clone
    soundFromSource' x' sound.source
end


from love use love
// NOTE(ed):
// This input wrapper is severly limited - it doesn't know what
// has been pressed and when, so we can only get "is-down".
// It also doesn't handle gamepads. :<

// Based on scancodes
Key :: enum
    A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z,
    N1, N2, N3, N4, N5, N6, N7, N8, N9, N0,
    Return, Escape, Backspace, Tab, Space,
    LCtrl, LShift, LAlt, LGui,
    RCtrl, RShift, RAlt, RGui,
    Up, Down, Left, Right,
end

strToKeyDict :: {
    "a": Key.A,
    "b": Key.B,
    "c": Key.C,
    "d": Key.D,
    "e": Key.E,
    "f": Key.F,
    "g": Key.G,
    "h": Key.H,
    "i": Key.I,
    "j": Key.J,
    "k": Key.K,
    "l": Key.L,
    "m": Key.M,
    "n": Key.N,
    "o": Key.O,
    "p": Key.P,
    "q": Key.Q,
    "r": Key.R,
    "s": Key.S,
    "t": Key.T,
    "u": Key.U,
    "v": Key.V,
    "w": Key.W,
    "x": Key.X,
    "y": Key.Y,
    "z": Key.Z,
    "1": Key.N1,
    "2": Key.N2,
    "3": Key.N3,
    "4": Key.N4,
    "5": Key.N5,
    "6": Key.N6,
    "7": Key.N7,
    "8": Key.N8,
    "9": Key.N9,
    "0": Key.N0,
    "return": Key.Return,
    "escape": Key.Escape,
    "backspace": Key.Backspace,
    "tab": Key.Tab,
    "space": Key.Space,
    "lctrl": Key.LCtrl,
    "lshift": Key.LShift,
    "lalt": Key.LAlt,
    "lgui": Key.LGui,
    "rctrl": Key.RCtrl,
    "rshift": Key. RShift,
    "ralt": Key. RAlt,
    "rgui": Key. RGui,
    "up": Key. Up,
    "down": Key. Down,
    "left": Key. Left,
    "right": Key.Right,
}

keyToStr :: fn k ->
    case k do
        A -> "a" end
        B -> "b" end
        C -> "c" end
        D -> "d" end
        E -> "e" end
        F -> "f" end
        G -> "g" end
        H -> "h" end
        I -> "i" end
        J -> "j" end
        K -> "k" end
        L -> "l" end
        M -> "m" end
        N -> "n" end
        O -> "o" end
        P -> "p" end
        Q -> "q" end
        R -> "r" end
        S -> "s" end
        T -> "t" end
        U -> "u" end
        V -> "v" end
        W -> "w" end
        X -> "x" end
        Y -> "y" end
        Z -> "z" end

        N1 -> "1" end
        N2 -> "2" end
        N3 -> "3" end
        N4 -> "4" end
        N5 -> "5" end
        N6 -> "6" end
        N7 -> "7" end
        N8 -> "8" end
        N9 -> "9" end
        N0 -> "0" end

        Return -> "return" end
        Escape -> "escape" end
        Backspace -> "backspace" end
        Tab -> "tab" end
        Space -> "space" end

        LCtrl -> "lctrl" end
        LShift -> "lshift" end
        LAlt -> "lalt" end
        LGui -> "lgui" end

        RCtrl -> "rctrl" end
        RShift -> "rshift" end
        RAlt -> "ralt" end
        RGui -> "rgui" end

        Up -> "up" end
        Down -> "down" end
        Left -> "left" end
        Right -> "right" end
    end
end

isKeyDown :: fn key ->
    love.keyboard.isScancodeDown' keyToStr(key)
end

MouseButton :: enum Left, Right, Middle end

mouseButtonToInt :: fn m ->
    case m do
        Left -> 0 end
        Right -> 1 end
        Middle -> 2 end
    end
end

mouseButtonDown :: fn button ->
    love.mouse.isDown' mouseButtonToInt(button)
end


mousePos :: fn ->
    x :: love.mouse.getX'
    y :: love.mouse.getY'
    (x, y)
end

placeMouse :: fn pos do
    love.mouse.setPosition' pos[0], pos[1]
end
